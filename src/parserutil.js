// Generated by CoffeeScript 1.6.2
(function() {
  var i, keyword, number, w, wordNumMap, _i, _len, _ref;

  exports.identifier = function(text, start) {
    var cursor, stop, w;

    cursor = start;
    switch (text[cursor]) {
      case '$':
      case '_':
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        cursor++;
        while (1) {
          switch (text[cursor]) {
            case '$':
            case '_':
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':
              cursor++;
          }
        }
    }
    stop = cursor;
    if (stop === start) {
      return;
    }
    w = keyword(start);
    if (w && cursor === stop) {
      return void 0;
    } else {
      return cursor;
    }
  };

  number = function(text, textLength, start) {
    var cursor, _results, _results1, _results2;

    cursor = start;
    switch (text[cursor]) {
      case '+':
      case '-':
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        cursor++;
    }
    switch (text[cursor++]) {
      case '0':
        switch ([cursor++]) {
          case 'o':
            _results = [];
            while (1) {
              switch ([cursor]) {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                  _results.push(cursor++);
                  break;
                case '8':
                case '9':
                  break;
                default:
                  _results.push(void 0);
              }
            }
            return _results;
            break;
          case 'x':
            _results1 = [];
            while (1) {
              switch ([cursor]) {
                case '0':
                case '1':
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                  _results1.push(cursor++);
                  break;
                default:
                  break;
              }
            }
            return _results1;
            break;
          case 'b':
            _results2 = [];
            while (1) {
              switch ([cursor]) {
                case '0':
                case '1':
                  _results2.push(cursor++);
                  break;
                case '2':
                case '3':
                case '4':
                case '5':
                case '6':
                case '7':
                case '8':
                case '9':
                  _results2.push(cursor++);
                  break;
                default:
                  _results2.push(void 0);
              }
            }
            return _results2;
        }
    }
  };

  exports.isdigit = function(c) {
    switch (c) {
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
        return true;
    }
  };

  exports.isletter = exports.isalpha = function(c) {
    switch (c) {
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return true;
    }
  };

  exports.islower = function(c) {
    switch (c) {
      case 'a':
      case 'b':
      case 'c':
      case 'd':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'i':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'n':
      case 'o':
      case 'p':
      case 'q':
      case 'r':
      case 's':
      case 't':
      case 'u':
      case 'v':
      case 'w':
      case 'x':
      case 'y':
      case 'z':
        return true;
    }
  };

  exports.isupper = function(c) {
    switch (c) {
      case 'A':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'F':
      case 'G':
      case 'H':
      case 'I':
      case 'J':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'P':
      case 'Q':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case 'Z':
        return true;
    }
  };

  exports.wordNumMap = wordNumMap = {};

  i = 1;

  _ref = ['__bind', '__extends', '__hasProp', '__indexOf', '__slice', 'break', 'by', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface', 'let', 'loop', 'native', 'new', 'null', 'of', 'package', 'private', 'protected', 'public', 'return', 'static', 'super', 'switch', 'then', 'this', 'throw', 'true', 'try', 'typeof', 'undefined', 'unless', 'until', 'var', 'void', 'when', 'while', 'with', 'yield'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    w = _ref[_i];
    wordNumMap[w] = i++;
  }

  exports.keyword = keyword = function(text, start) {
    var cursor;

    cursor = start;
    switch (text[cursor++]) {
      case '_':
        if (text[cursor++] === '_') {
          switch (text[cursor++]) {
            case 'b':
              if (text.slice(cursor, cursor += 3) === 'ind') {
                return '__bind';
              }
              break;
            case 'e':
              if (text.slice(cursor, cursor += 6) === 'xtends') {
                return '__extends';
              }
              break;
            case 'h':
              if (text.slice(cursor, cursor += 6) === 'asProp') {
                return '__hasProp';
              }
              break;
            case 'i':
              if (text.slice(cursor, cursor += 6) === 'ndexOf') {
                return '__indexOf';
              }
              break;
            case 's':
              if (text.slice(cursor, cursor += 4) === 'lice') {
                return '__slice';
              }
          }
        }
        break;
      case 'b':
        switch (text[cursor++]) {
          case 'r':
            if (text.slice(cursor, cursor += 3) === 'eak') {
              return 'break';
            }
            break;
          case 'y':
            return 'by';
        }
        break;
      case 'c':
        switch (text[cursor++]) {
          case 'a':
            switch (text[cursor++]) {
              case 's':
                if (text[cursor++] === 'e') {
                  return 'case';
                }
                break;
              case 't':
                if (text.slice(cursor, cursor += 2) === 'ch') {
                  return 'catch';
                }
            }
            break;
          case 'l':
            if (text.slice(cursor, cursor += 3) === 'ass') {
              return 'class';
            }
            break;
          case 'o':
            if (text[cursor++] === 'n') {
              switch (text[cursor++]) {
                case 's':
                  if (text[cursor++] === 't') {
                    return 'const';
                  }
                  break;
                case 't':
                  if (text.slice(cursor, cursor += 4) === 'inue') {
                    return 'continue';
                  }
              }
            }
        }
        break;
      case 'd':
        switch (text[cursor++]) {
          case 'e':
            switch (text[cursor++]) {
              case 'b':
                if (text.slice(cursor, cursor += 5) === 'ugger') {
                  return 'debugger';
                }
                break;
              case 'f':
                if (text.slice(cursor, cursor += 4) === 'ault') {
                  return 'default';
                }
                break;
              case 'l':
                if (text.slice(cursor, cursor += 3) === 'ete') {
                  return 'delete';
                }
            }
            break;
          case 'o':
            return 'do';
        }
        break;
      case 'e':
        switch (text[cursor++]) {
          case 'l':
            if (text.slice(cursor, cursor += 2) === 'se') {
              return 'else';
            }
            break;
          case 'n':
            if (text.slice(cursor, cursor += 2) === 'um') {
              return 'enum';
            }
            break;
          case 'x':
            switch (text[cursor++]) {
              case 'p':
                if (text.slice(cursor, cursor += 3) === 'ort') {
                  return 'export';
                }
                break;
              case 't':
                if (text.slice(cursor, cursor += 4) === 'ends') {
                  return 'extends';
                }
            }
        }
        break;
      case 'f':
        switch (text[cursor++]) {
          case 'a':
            if (text.slice(cursor, cursor += 3) === 'lse') {
              return 'false';
            }
            break;
          case 'i':
            if (text.slice(cursor, cursor += 5) === 'nally') {
              return 'finally';
            }
            break;
          case 'o':
            if (text[cursor++] === 'r') {
              return 'for';
            }
            break;
          case 'u':
            if (text.slice(cursor, cursor += 5) === 'nction') {
              return 'function';
            }
        }
        break;
      case 'i':
        switch (text[cursor++]) {
          case 'f':
            return 'if';
          case 'm':
            switch (text[cursor++]) {
              case 'p':
                switch (text[cursor++]) {
                  case 'l':
                    if (text.slice(cursor, cursor += 6) === 'ements') {
                      return 'implements';
                    }
                    break;
                  case 'o':
                    if (text.slice(cursor, cursor += 2) === 'rt') {
                      return 'import';
                    }
                }
            }
            break;
          case 'n':
            switch (text[cursor++]) {
              case 's':
                if (text.slice(cursor, cursor += 7) === 'tanceof') {
                  return 'instanceof';
                }
                break;
              case 't':
                if (text.slice(cursor, cursor += 6) === 'erface') {
                  return 'interface';
                }
                break;
              default:
                cursor--;
                return 'in';
            }
        }
        break;
      case 'l':
        switch (text[cursor++]) {
          case 'e':
            if (text[cursor++] === 't') {
              return 'let';
            }
            break;
          case 'o':
            if (text.slice(cursor, cursor += 2) === 'op') {
              return 'loop';
            }
        }
        break;
      case 'n':
        switch (text[cursor++]) {
          case 'a':
            if (text.slice(cursor, cursor += 4) === 'tive') {
              return 'native';
            }
            break;
          case 'e':
            if (text[cursor++] === 'w') {
              return 'new';
            }
            break;
          case 'u':
            if (text.slice(cursor, cursor += 2) === 'll') {
              return 'null';
            }
        }
        break;
      case 'o':
        if (text[cursor++] === 'f') {
          return 'of';
        }
        break;
      case 'p':
        switch (text[cursor++]) {
          case 'a':
            if (text.slice(cursor, cursor += 5) === 'ckage') {
              return 'package';
            }
            break;
          case 'r':
            switch (text[cursor++]) {
              case 'i':
                if (text.slice(cursor, cursor += 4) === 'vate') {
                  return 'private';
                }
                break;
              case 'o':
                if (text.slice(cursor, cursor += 6) === 'tected') {
                  return 'protected';
                }
            }
            break;
          case 'u':
            if (text.slice(cursor, cursor += 4) === 'blic') {
              return 'blic';
            }
        }
        break;
      case 'r':
        if (text.slice(cursor, cursor += 5) === 'eturn') {
          return 'return';
        }
        break;
      case 's':
        switch (text[cursor++]) {
          case 't':
            if (text.slice(cursor, cursor += 4) === 'atic') {
              return 'static';
            }
            break;
          case 'u':
            if (text.slice(cursor, cursor += 3) === 'per') {
              return 'super';
            }
            break;
          case 'w':
            if (text.slice(cursor, cursor += 4) === 'itch') {
              return 'switch';
            }
        }
        break;
      case 't':
        switch (text[cursor++]) {
          case 'h':
            switch (text[cursor++]) {
              case 'e':
                if (text[cursor++] === 'n') {
                  return 'then';
                }
                break;
              case 'i':
                if (text[cursor++] === 's') {
                  return 'this';
                }
                break;
              case 'r':
                if (text.slice(cursor, cursor += 2) === 'ow') {
                  return 'throw';
                }
            }
            break;
          case 'r':
            switch (text[cursor++]) {
              case 'u':
                if (text[cursor++] === 'e') {
                  return 'true';
                }
                break;
              case 'y':
                return 'try';
            }
            break;
          case 'y':
            if (text.slice(cursor, cursor += 4) === 'peof') {
              return 'typeof';
            }
        }
        break;
      case 'u':
        switch (text[cursor++]) {
          case 'n':
            switch (text[cursor++]) {
              case 'd':
                if (text.slice(cursor, cursor += 6) === 'efined') {
                  return 'undefined';
                }
                break;
              case 'l':
                if (text.slice(cursor, cursor += 3) === 'ess') {
                  return 'unless';
                }
                break;
              case 't':
                if (text.slice(cursor, cursor += 2) === 'il') {
                  return 'until';
                }
            }
        }
        break;
      case 'v':
        switch (text[cursor++]) {
          case 'a':
            if (text[cursor++] === 'r') {
              return 'var';
            }
            break;
          case 'o':
            if (text.slice(cursor, cursor += 2) === 'id') {
              return 'void';
            }
        }
        break;
      case 'w':
        switch (text[cursor++]) {
          case 'h':
            switch (text[cursor++]) {
              case 'e':
                if (text[cursor++] === 'n') {
                  return 'when';
                }
                break;
              case 'i':
                if (text.slice(cursor, cursor += 3) === 'le') {
                  return 'while';
                }
            }
            break;
          case 'i':
            if (text.slice(cursor, cursor += 2) === 'th') {
              return 'with';
            }
        }
        break;
      case 'w':
        if (text.slice(cursor, cursor += 4) === 'ield') {
          return 'yield';
        }
    }
  };

}).call(this);

/*
//@ sourceMappingURL=parserutil.map
*/
